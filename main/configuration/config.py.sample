#! /usr/bin/python
# -*- coding:utf-8 -*-

class Config:
    SECRET_KEY = "f(\xdfyx9d#x1n\xc4U=?\xa8}\x96\45u:H"
    
    @staticmethod
    def init_app(app):
        pass

class DeveloppementConfig(Config):
    DEBUG = True
    SQLALCHEMY_DATABASE_URI = "postgresql://geonatatlas:monpassachanger@localhost:5432/geonaturedb"

class ProductionConfig(Config):
    SQLALCHEMY_DATABASE_URI = "postgresql://geonatatlas:monpassachanger@localhost:5432/geonaturedb" 

config = {
    'development':DeveloppementConfig,
    'production': ProductionConfig
    }

database_connection = "postgresql://geonatatlas:monpassachanger@localhost:5432/geonaturedb"





### Customisation application

#Map
IGNAPIKEY = 'myIGN-KEY';

MAP = { 
    'LAT_LONG': [44.7952, 6.2287],
    'FIRST_MAP': { 
            'url' : 'http://gpp3-wxs.ign.fr/'+IGNAPIKEY+'/wmts?LAYER=GEOGRAPHICALGRIDSYSTEMS.MAPS.SCAN-EXPRESS.STANDARD&EXCEPTIONS=text/xml&FORMAT=image/jpeg&SERVICE=WMTS&VERSION=1.0.0&REQUEST=GetTile&STYLE=normal&TILEMATRIXSET=PM&&TILEMATRIX={z}&TILECOL={x}&TILEROW={y}',
            'attribution' : '&copy; <a href="http://www.ign.fr/">IGN</a>',
            'tileName' : 'IGN'
        },
        'SECOND_MAP' : {"url" :'https://gpp3-wxs.ign.fr/'+IGNAPIKEY+'/geoportail/wmts?LAYER=ORTHOIMAGERY.ORTHOPHOTOS&EXCEPTIONS=text/xml&FORMAT=image/jpeg&SERVICE=WMTS&VERSION=1.0.0&REQUEST=GetTile&STYLE=normal&TILEMATRIXSET=PM&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}',
              "attribution": "",
              "tileName" : 'Ortho IGN'
            },
        'ZOOM' : 10,
        # Pas du slider sur les annees d observations: 1 = pas de 1 ans sur le slider
        'STEP': 1
}

# URL de l'application depuis la racine du serveur web
URL_APPLICATION = "/atlas"

# Nom de la structure
STRUCTURE = "Parc national des Écrins"
STRUCTURE = unicode(STRUCTURE, 'utf-8') # Fonction permettant d'encoder ce nom en utf-8, à ne pas modifier

# Nom de l'application
NOM_APPLICATION = "Biodiversité du Parc national des Écrins"
NOM_APPLICATION = unicode(NOM_APPLICATION, 'utf-8') # Fonction permettant d'encoder ce nom en utf-8, à ne pas modifier

# Bloc d'introdution presentant l'atlas affichage True/False
AFFICHAGE_INTRODUCTION = False


# Afficher les observations par maille ou point / True = maille False = point
AFFICHAGE_MAILLE = True

# Niveau de zoom à partir duquel on passe à l'affichage en point (si AFFICHAGE_MAILLE = False)
ZOOM_LEVEL_POINT = 11

# Nombre des 'x' dernières observations affichées sur la carte de la page d'accueil
NB_LAST_OBS = 100

# Nombre d'observations à partir duquel on passe à l'affichage en cluster
LIMIT_CLUSTER_POINT = 1000

# Rang taxonomique qui fixe jusqu'à quel niveau remonte la filiation taxonomique (hierarchie dans la fiche d'identite)
LIMIT_RANG_TAXONOMIQUE_HIERARCHIE = 13

# Rang taxonomique qui fixe le niveau auquel on bascule entre l'affichage de la fiche espèce ou de la liste des espèces du rang.  Exemple : ** 35 = ESPECE **  On prend tout ce qui est inférieur ou égal à l'espèce pour faire des fiches et ce qui est supérieur pour les listes
LIMIT_FICHE_LISTE_HIERARCHY = 35

# URL du répertoire de stockage des médias (avant static/images/)
URL_MEDIAS = "chemin_vers_le_dossier_de_stockage"

# ID DES ATTRIBUTS DESCRIPTIFS DES TAXONS DE LA TABLE vm_cor_taxon_attribut
ATTR_DESC = 100
ATTR_COMMENTAIRE = 101
ATTR_MILIEU = 102
ATTR_CORROLOGIE = 103

# ID DES TYPES DE MEDIAS DE LA TABLE vm_medias
ATTR_MAIN_PHOTO = 1
ATTR_OTHER_PHOTO = 2

## BLOC STAT : Paramètres pour le bloc statistique 2 de la page d'accueil
# Mettre dans RANG_STAT le couple 'rang taxonomique' - 'nom du taxon correspondant au rang' pour avoir des statistiques sur ce rang -
# Fonctionne à tous les niveaux de rang présents dans la table vm_taxref - Important: mettre au maximum deux 'couples' dans le tableau

# exemple RANG_STAT = [{'ordre': '"Lepidoptera"'}, {'classe': 'Insecta'}]
#         RANG_STAT_FR ['Papillon', 'Insecte']

RANG_STAT = [{'regne': 'Animalia'}, {'regne': 'Plantae'}] 
RANG_STAT_FR = ['Faune', 'Flore']